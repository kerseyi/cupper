<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Patterns on A11y Ref</title>
    <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/</link>
    <description>Recent content in Code Patterns on A11y Ref</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kerseyi.github.io/cupper-2/patterns/code-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Expandable Sections</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/expandable-sections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/expandable-sections/</guid>
      <description>Applicable WCAG 2.1 Success Criteria 1.4.12 Text Spacing (level AA):In content implemented using markup languages that support the following text style properties, no loss of content or functionality occurs by setting all of the following and by changing no other style property:Dismissable:A mechanism is available to dismiss the additional content without moving pointer hover or keyboard focus, unless the additional content communicates an input error or does not obscure or replace other content;Hoverable:If pointer hover can trigger the additional content, then the pointer can be moved over the additional content without the additional content disappearing;2.</description>
    </item>
    
    <item>
      <title>Accordion Menus</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/accordion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/accordion/</guid>
      <description>Accordion menus are everywhere we look on the web. With such ubiquity, you&amp;rsquo;d expect that there would be a pretty well defined standard for constructing these components. Well, there&amp;rsquo;s not. So when it comes to making accordion menus accessible, things can get tricky. While the functionality and HTML markup for accordions is pretty straightforward, some implementations are overly complex. Let&amp;rsquo;s take a look at the intended functionality of an accordion menu before we look under the hood.</description>
    </item>
    
    <item>
      <title>Pop ups and Modals</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/modal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/modal/</guid>
      <description>Modals are intended to be used as a quick and simple way to capture an interaction from a user. They trap the user’s focus (visual and navigational) in a window that is separated from the rest of the page content, blocking access to the contents on the main page until the modal is closed by the user. These modal windows are overlaid over the main page content, trapping keyboard focus in their windows, and blurring out or dimming the main page content.</description>
    </item>
    
    <item>
      <title>Menus</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/menus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/menus/</guid>
      <description>Menu Buttons Here is an example of the menu button being activated on the click event.
Demo Launch ↗Menu Buttonconst menuButton = demo.getElementById(&#39;menu-btn-example1&#39;);menuButton.addEventListener(&#39;click&#39;, function(){let expanded = this.getAttribute(&#39;aria-expanded&#39;) === &#39;true&#39;;this.setAttribute(&#39;aria-expanded&#39;, !expanded);let exampleMenu = this.nextElementSibling;exampleMenu.hidden = !exampleMenu.hidden;});button {font-size: 1.25rem;border-radius: 0.33em;font-family: inherit;background: #111;color: #fefefe;padding: 0.75rem;border: 0;}ul {list-style: none;width: 150px;margin-top: 0px;padding-left: 0px;border-bottom-left-radius: 0.</description>
    </item>
    
    <item>
      <title>Alerts</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/alerts/</guid>
      <description>Alerts are an important type of ARIA live region which provide screen readers with ways to announce meaningful information to a user. These alerts are triggered programmatically, usually based on a user interaction or timer. They announce text to the use without moving keyboard focus. Since they are intended to stand out from other content on the page, they should be styled and positioned on the page close to the user&amp;rsquo;s mouse or element that has keyboard focus.</description>
    </item>
    
    <item>
      <title>Carousel</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/carousel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/carousel/</guid>
      <description>Accessible content slider / carousel, ported from Inclusive Components.</description>
    </item>
    
    <item>
      <title>Datepicker</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/datepicker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/datepicker/</guid>
      <description>Accessible datepicker, ported from Inclusive Dates.
Applicable WCAG 2.1 Success Criteria 1.3.1 Info and Relationships (level A):Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.2.1.1 Keyboard (level A):All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user&amp;#39;s movement and not just the endpointsNo Background:The audio does not contain background sounds.</description>
    </item>
    
    <item>
      <title>Interactive Tables</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/sort-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/sort-table/</guid>
      <description>Interactive tables are powerful widgets that can provide many different layers of fucntionality. They provide a variety of different fucntions, which can be as simple as sorting rows or as complex as duplicating spreadsheet functions.
WCAG Criteria 1.3.1 Info and Relationships (level A)4.1.1 Parsing (level A)4.1.2 Name, Role, Value (level A)Example 1: Sortable Data Grid w / Editable Cells Demo Launch ↗Transactions January 1 through January 7DateTypeDescriptionCategoryAmountBalance01-Jan-16DepositCash DepositIncomeIncomeGroceriesDining OutAutoHouseholdBeauty$1,000,000.</description>
    </item>
    
    <item>
      <title>Skip Links</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/skiplink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/skiplink/</guid>
      <description>Skip links are a common accessibility feature on websites. They are shortcuts to important parts of the webpage that makes it easier and quicker for some users – especially users with disabilities – to find their way around. They care commonly placed before the main navigation menu on the page, but can be used anywhere there is a chunk of content.
Skip links are usually hidden visually by default and appear when users navigate to them using the tab key on their keyboard.</description>
    </item>
    
    <item>
      <title>Tables</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/tables/</guid>
      <description>WCAG Criteria 1.3.1 Info and Relationships (level A)4.1.1 Parsing (level A)4.1.2 Name, Role, Value (level A)Techniques H43: Using id and headers attributes to associate data cells with header cells in data tables Description The objective of this technique is to associate each data cell (in a data table) with the appropriate headers.</description>
    </item>
    
  </channel>
</rss>
