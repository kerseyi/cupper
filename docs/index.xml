<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A11y Code Patterns and References on A11y Ref</title>
    <link>https://kerseyi.github.io/cupper-2/</link>
    <description>Recent content in A11y Code Patterns and References on A11y Ref</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kerseyi.github.io/cupper-2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Expandable Sections</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/expandable-sections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/expandable-sections/</guid>
      <description>Applicable WCAG 2.1 Success Criteria 1.4.12 Text Spacing (level AA):In content implemented using markup languages that support the following text style properties, no loss of content or functionality occurs by setting all of the following and by changing no other style property:Dismissable:A mechanism is available to dismiss the additional content without moving pointer hover or keyboard focus, unless the additional content communicates an input error or does not obscure or replace other content;Hoverable:If pointer hover can trigger the additional content, then the pointer can be moved over the additional content without the additional content disappearing;2.</description>
    </item>
    
    <item>
      <title>Tooltips</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/tooltips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/tooltips/</guid>
      <description>Accessible Tooltips Demo Launch ↗Accessible Tooltip.demo {height: 200px;}[role=&#34;tooltip&#34;] {display: none;border: 2px solid black;padding: 10px;border-radius: 5px;width: 40%;}.arrow_box {position: relative;background: #fff;border: 2px solid #000;margin-top: 15px;}.arrow_box:after, .arrow_box:before {bottom: 100%;left: 15%;border: solid transparent;content: &#34;&#34;;height: 0;width: 0;position: absolute;pointer-events: none;}.arrow_box:after {border-color: rgba(255, 255, 255, 0);border-bottom-color: #fff;border-width: 20px;margin-left: -20px;}.</description>
    </item>
    
    <item>
      <title>WCAG 2.1</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/w3c/wcagquickref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/w3c/wcagquickref/</guid>
      <description>WCAG 2.1 Quick Reference  WCAG Quick Ref - A customizable quick reference to Web Content Accessibility Guidelines (WCAG) 2 requirements (success criteria) and techniques.  WCAG 2.1 Tutorials  WCAG Tutorials  Page Structure Menus Images Tables Forms Carousels    WCAG Report Tools  WCAG-EM Report Tool  </description>
    </item>
    
    <item>
      <title>Accordion Menus</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/accordion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/accordion/</guid>
      <description>Accordion menus are everywhere we look on the web. With such ubiquity, you&amp;rsquo;d expect that there would be a pretty well defined standard for constructing these components. Well, there&amp;rsquo;s not. So when it comes to making accordion menus accessible, things can get tricky. While the functionality and HTML markup for accordions is pretty straightforward, some implementations are overly complex. Let&amp;rsquo;s take a look at the intended functionality of an accordion menu before we look under the hood.</description>
    </item>
    
    <item>
      <title>ATAG 2.0</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/w3c/atag2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/w3c/atag2/</guid>
      <description>Authoring tools are software and services that “authors” (web developers, designers, writers, etc.) use to produce web content (static web pages, dynamic web applications, etc.).
ATAG Overview  ATAG Overview  ATAG Quick Guide  ATAG Quick Guide  ATAG Report Tool  ATAG Quick Guide  </description>
    </item>
    
    <item>
      <title>Pop ups and Modals</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/modal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/modal/</guid>
      <description>Modals are intended to be used as a quick and simple way to capture an interaction from a user. They trap the user’s focus (visual and navigational) in a window that is separated from the rest of the page content, blocking access to the contents on the main page until the modal is closed by the user. These modal windows are overlaid over the main page content, trapping keyboard focus in their windows, and blurring out or dimming the main page content.</description>
    </item>
    
    <item>
      <title>Menus</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/menus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/menus/</guid>
      <description>Menu Buttons Here is an example of the menu button being activated on the click event.
Demo Launch ↗Menu Buttonconst menuButton = demo.getElementById(&#39;menu-btn-example1&#39;);menuButton.addEventListener(&#39;click&#39;, function(){let expanded = this.getAttribute(&#39;aria-expanded&#39;) === &#39;true&#39;;this.setAttribute(&#39;aria-expanded&#39;, !expanded);let exampleMenu = this.nextElementSibling;exampleMenu.hidden = !exampleMenu.hidden;});button {font-size: 1.25rem;border-radius: 0.33em;font-family: inherit;background: #111;color: #fefefe;padding: 0.75rem;border: 0;}ul {list-style: none;width: 150px;margin-top: 0px;padding-left: 0px;border-bottom-left-radius: 0.</description>
    </item>
    
    <item>
      <title>Print version</title>
      <link>https://kerseyi.github.io/cupper-2/print-version/</link>
      <pubDate>Sat, 29 Jul 2017 22:48:43 +0100</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/print-version/</guid>
      <description>You don&amp;rsquo;t want to edit this file :-)</description>
    </item>
    
    <item>
      <title>Alerts</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/alerts/</guid>
      <description>Alerts are an important type of ARIA live region which provide screen readers with ways to announce meaningful information to a user. These alerts are triggered programmatically, usually based on a user interaction or timer. They announce text to the use without moving keyboard focus. Since they are intended to stand out from other content on the page, they should be styled and positioned on the page close to the user&amp;rsquo;s mouse or element that has keyboard focus.</description>
    </item>
    
    <item>
      <title>Alternate Text, Text Descriptions, and Captions</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/reference/alttext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/reference/alttext/</guid>
      <description>Poet Training Tool - Exhaustive training tool that details best practices for creating alternate text for images.
  Writing Alt Text for Data Visualization - Writing Alt Text for Data Visualization
  Writing alt text for complex images - WAI tutorial for writing alt text for complex images
  WCAG Criteria1.1.1 Non-text Content (level A):All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below.</description>
    </item>
    
    <item>
      <title>Application</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/aria/roles/application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/aria/roles/application/</guid>
      <description>What is ARIA? ARIA is a way for websites and web apps to communicate with screen readers. You can think of ARIA as an API for communicating information about an interactive HTML element / widget to a screen reader.
What ARIA isn&amp;rsquo;t  A programming language Magic  What ARIA Communicates to Screen Readers  labels and names roles states properties relationships live announcements  Accessible Name Calculation Here is how the accessible name of an element is calculated:</description>
    </item>
    
    <item>
      <title>Carousel</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/carousel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/carousel/</guid>
      <description>Accessible content slider / carousel, ported from Inclusive Components.</description>
    </item>
    
    <item>
      <title>Datepicker</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/datepicker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/datepicker/</guid>
      <description>Accessible datepicker, ported from Inclusive Dates.
Applicable WCAG 2.1 Success Criteria 1.3.1 Info and Relationships (level A):Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.2.1.1 Keyboard (level A):All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user&amp;#39;s movement and not just the endpointsNo Background:The audio does not contain background sounds.</description>
    </item>
    
    <item>
      <title>Dev Resources</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/reference/dev_resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/reference/dev_resources/</guid>
      <description> Accessibility Checklist - Accessibility checklist for those building websites and interfaces HTML5 Accessibility - Get the current accessibility support status of HTML5 features across major browsers Accessibility for teams - Amazing guide on a11y practices for all members of a team Vana11y - Vanilla JS component examples  Bookmarklets  WCAG Parsing - Helps catch WCAG 4.1.1 errors  </description>
    </item>
    
    <item>
      <title>Graphics and Design</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/reference/color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/reference/color/</guid>
      <description>Color  Color Safe - Accessible color palettes based on WCAG Guidelines of text and background contrast ratios Contrast Grid - Test BG and FG colors Accessible Colors Accessible color palette builder - Build an accessible color palette Color Cube Color Checker - Tool that checks color combinations for accessibility, and lets you adjust colors until they pass. Great for tweaking brand colors.  WCAG Criteria1.</description>
    </item>
    
    <item>
      <title>Interactive Tables</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/sort-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/sort-table/</guid>
      <description>Interactive tables are powerful widgets that can provide many different layers of fucntionality. They provide a variety of different fucntions, which can be as simple as sorting rows or as complex as duplicating spreadsheet functions.
WCAG Criteria 1.3.1 Info and Relationships (level A)4.1.1 Parsing (level A)4.1.2 Name, Role, Value (level A)Example 1: Sortable Data Grid w / Editable Cells Demo Launch ↗Transactions January 1 through January 7DateTypeDescriptionCategoryAmountBalance01-Jan-16DepositCash DepositIncomeIncomeGroceriesDining OutAutoHouseholdBeauty$1,000,000.</description>
    </item>
    
    <item>
      <title>Name Test</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/aria/name/name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/aria/name/name/</guid>
      <description>What is ARIA? ARIA is a way for websites and web apps to communicate with screen readers. You can think of ARIA as an API for communicating information about an interactive HTML element / widget to a screen reader.
What ARIA isn&amp;rsquo;t  A programming language Magic  What ARIA Communicates to Screen Readers  labels and names roles states properties relationships live announcements  Accessible Name Calculation Here is how the accessible name of an element is calculated:</description>
    </item>
    
    <item>
      <title>Name Test 2</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/aria/name/name2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/aria/name/name2/</guid>
      <description>What is ARIA? ARIA is a way for websites and web apps to communicate with screen readers. You can think of ARIA as an API for communicating information about an interactive HTML element / widget to a screen reader.
What ARIA isn&amp;rsquo;t  A programming language Magic  What ARIA Communicates to Screen Readers  labels and names roles states properties relationships live announcements  Accessible Name Calculation Here is how the accessible name of an element is calculated:</description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/reference/nav/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/reference/nav/</guid>
      <description>Skip Links   Axess Lab - What are skip links? - Exhaustive training tool that details best practices for creating alternate text for images.
  Pure CSS Skip Link
  WCAG Criteria2.4.1 Bypass Blocks (level A):A mechanism is available to bypass blocks of content that are repeated on multiple Web pages.</description>
    </item>
    
    <item>
      <title>Notifications / Alerts</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/reference/notifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/reference/notifications/</guid>
      <description>Live Regions  Accessiblity Talks https://www.youtube.com/watch?v=W5YAaLLBKhQ&amp;amp;feature=youtu.be Live Region Codepen https://codepen.io/iankonlineada/pen/eYJwQBY    Aria Roles  alert status  Poor support  aria-atomic : what is read? aria-relevant : when it is read aria-busy : maybe don&amp;rsquo;t read this? Wait until something else is done. Dependent on screen reader / user tech.  No support  role=&amp;ldquo;marquee&amp;rdquo; role=&amp;ldquo;timer&amp;rdquo;  HTML   Scott O&amp;rsquo;Hara https://www.scottohara.me/blog/2019/07/10/the-output-element.html  Types of live regions   Dynamic search bar - Don&amp;rsquo;t want it to update to frequently.</description>
    </item>
    
    <item>
      <title>Plugins and Apps</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/reference/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/reference/plugins/</guid>
      <description>Plugins, apps, and other tools to test
Plugins  Accessiblity Checklist - Accessiblity checklist for those building websites and interfaces.  Testing Building Empathy </description>
    </item>
    
    <item>
      <title>Roles, states, and properties</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/aria/roles/rolesstatesproperties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/aria/roles/rolesstatesproperties/</guid>
      <description>Roles Widget Roles  button checkbox gridcell link menuitem menuitemcheckbox menuitemradio option progressbar radio scrollbar searchbox separator (when focusable) slider spinbutton switch tab tabpanel textbox treeitem  Composite Roles  combobox grid (including row, gridcell, rowheader, columnheader roles) listbox (including option role menu menubar radiogroup (see radio role) tablist (including tab and tabpanel roles) tree treegrid  </description>
    </item>
    
    <item>
      <title>Screen Readers</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/reference/sr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/reference/sr/</guid>
      <description>Using a Screen Reader  Understanding Screen Reader Interaction - A great primer on how to use a screen reader VoiceOver Keyboard Shortcuts - A free screen reader for Windows Common Screen Reader Shortcut Mind Map - A visual map of common screen reader shortcuts  Screen Readers  NVDA - A free screen reader for Windows JAWS - A paid screen reader for Windows VoiceOver - VoiceOver is the built-in screen reader for Mac and iOS devices.</description>
    </item>
    
    <item>
      <title>Skip Links</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/skiplink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/skiplink/</guid>
      <description>Skip links are a common accessibility feature on websites. They are shortcuts to important parts of the webpage that makes it easier and quicker for some users – especially users with disabilities – to find their way around. They care commonly placed before the main navigation menu on the page, but can be used anywhere there is a chunk of content.
Skip links are usually hidden visually by default and appear when users navigate to them using the tab key on their keyboard.</description>
    </item>
    
    <item>
      <title>Tables</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/code-patterns/tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/code-patterns/tables/</guid>
      <description>WCAG Criteria 1.3.1 Info and Relationships (level A)4.1.1 Parsing (level A)4.1.2 Name, Role, Value (level A)Techniques H43: Using id and headers attributes to associate data cells with header cells in data tables Description The objective of this technique is to associate each data cell (in a data table) with the appropriate headers.</description>
    </item>
    
    <item>
      <title>What is ARIA</title>
      <link>https://kerseyi.github.io/cupper-2/patterns/reference/aria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kerseyi.github.io/cupper-2/patterns/reference/aria/</guid>
      <description>What is ARIA? ARIA is a way for websites and web apps to communicate with screen readers. You can think of ARIA as an API for communicating information about an interactive HTML element / widget to a screen reader.
What ARIA isn&amp;rsquo;t  A programming language Magic  What ARIA Communicates to Screen Readers  labels and names roles states properties relationships live announcements  Accessible Name Calculation Here is how the accessible name of an element is calculated:</description>
    </item>
    
  </channel>
</rss>
